name: EVE SDE Converter

permissions:
  contents: write
  id-token: write

on:
  schedule:
    - cron: '20 11 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  convert:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y sqlite3

    - name: Install tsx
      run: pnpm add -g tsx

    - name: Check if release exists
      id: check_release
      run: |
        BUILD_NUMBER=$(tsx src/index.ts check-update 2>&1 | grep "Latest build number:" | awk '{print $4}')
        COMMIT_SHA=$(git rev-parse --short HEAD)
        TAG_NAME="sde-${BUILD_NUMBER}-${COMMIT_SHA}"
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists. Skipping."
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Release $TAG_NAME does not exist. Proceeding."
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        fi

    - name: Fetch changelog
      if: steps.check_release.outputs.exists == 'false'
      id: fetch_changelog
      run: |
        BUILD_NUMBER="${{ steps.check_release.outputs.build_number }}"
        CHANGELOG_URL="https://developers.eveonline.com/static-data/tranquility/changes/${BUILD_NUMBER}.jsonl"
        
        echo "Fetching changelog from: $CHANGELOG_URL"
        
        CHANGELOG=$(curl -s "$CHANGELOG_URL" | while IFS= read -r line; do
          KEY=$(echo "$line" | jq -r '._key // empty')
          if [ -n "$KEY" ] && [ "$KEY" != "_meta" ]; then
            CHANGED=$(echo "$line" | jq -r '.changed // empty')
            ADDED=$(echo "$line" | jq -r '.added // empty')
            REMOVED=$(echo "$line" | jq -r '.removed // empty')
            
            COUNT=0
            TYPES=""
            
            if [ -n "$CHANGED" ] && [ "$CHANGED" != "null" ]; then
              CHANGED_COUNT=$(echo "$CHANGED" | jq 'length')
              COUNT=$((COUNT + CHANGED_COUNT))
              TYPES="${TYPES}modified"
            fi
            
            if [ -n "$ADDED" ] && [ "$ADDED" != "null" ]; then
              ADDED_COUNT=$(echo "$ADDED" | jq 'length')
              COUNT=$((COUNT + ADDED_COUNT))
              [ -n "$TYPES" ] && TYPES="${TYPES}, "
              TYPES="${TYPES}added"
            fi
            
            if [ -n "$REMOVED" ] && [ "$REMOVED" != "null" ]; then
              REMOVED_COUNT=$(echo "$REMOVED" | jq 'length')
              COUNT=$((COUNT + REMOVED_COUNT))
              [ -n "$TYPES" ] && TYPES="${TYPES}, "
              TYPES="${TYPES}removed"
            fi
            
            if [ $COUNT -gt 0 ]; then
              echo "**${KEY}**"
              echo "${COUNT} modifications (${TYPES})"
              echo ""
            fi
          fi
        done)
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="No changelog available for this build."
        fi
        
        # Save to file to avoid issues with special characters
        echo "$CHANGELOG" > /tmp/changelog.txt
        echo "changelog_file=/tmp/changelog.txt" >> $GITHUB_OUTPUT

    - name: Run conversion
      if: steps.check_release.outputs.exists == 'false'
      run: tsx src/index.ts convert

    - name: Compress files
      if: steps.check_release.outputs.exists == 'false'
      run: |
        bzip2 output/sde.sql &
        bzip2 output/sde.sqlite &
        wait

    - name: Create and upload release
      if: steps.check_release.outputs.exists == 'false'
      run: |
        TAG="sde-${{ steps.check_release.outputs.build_number }}-${{ steps.check_release.outputs.commit_sha }}"
        TITLE="EVE SDE Build ${{ steps.check_release.outputs.build_number }} (Commit ${{ steps.check_release.outputs.commit_sha }})"
        
        CHANGELOG=$(cat ${{ steps.fetch_changelog.outputs.changelog_file }})
        
        NOTES="Automated release for EVE SDE build ${{ steps.check_release.outputs.build_number }}

        Commit: ${{ steps.check_release.outputs.commit_sha }}

        ## Changes

        ${CHANGELOG}

        ## Generated files
        - sde.sql.bz2 (Compressed MySQL dump)
        - sde.sqlite.bz2 (Compressed SQLite database)"
        
        gh release create "$TAG" --title "$TITLE" --notes "$NOTES" ./output/sde.sql.bz2 ./output/sde.sqlite.bz2
